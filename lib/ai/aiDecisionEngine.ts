import { getMoonshotClient } from './moonshotClient';
import { Company, GameState, Building, Agent } from '../game/useGameState';

export interface AIDecision {
  action: 'purchase_building' | 'recruit_employee' | 'stock_manipulation' | 'attack' | 'intelligence' | 'wait';
  target?: string | number;
  reasoning: string;
  priority: number;
  cost: number;
}

export class AIDecisionEngine {
  private moonshotClient = getMoonshotClient();
  private decisionHistory: Map<string, any[]> = new Map();

  async makeDecision(
    company: Company,
    gameState: GameState,
    options: {
      availableBuildings: Building[];
      enemies: Company[];
      marketConditions: any;
    }
  ): Promise<AIDecision> {
    // ÊûÑÂª∫‰∏ä‰∏ãÊñá‰ø°ÊÅØ
    const context = this.buildGameContext(company, gameState, options);
    
    // ÊûÑÂª∫ÂÜ≥Á≠ñÊèêÁ§∫
    const prompt = this.buildDecisionPrompt(context);
    
    try {
      // Ë∞ÉÁî® AI API Ëé∑ÂèñÂÜ≥Á≠ñ
      console.log(`ü§ñ AI Decision for ${company.name}: Making API call to Moonshot...`);
      const aiResponse = await this.moonshotClient.chat(prompt);
      console.log(`‚úÖ AI Decision for ${company.name}: Received response`, aiResponse.substring(0, 200) + '...');
      
      // Ëß£Êûê AI ÂõûÂ∫î
      const decision = this.parseAIResponse(aiResponse, context);
      
      // ËÆ∞ÂΩïÂÜ≥Á≠ñÂéÜÂè≤
      this.recordDecision(company.id, decision);
      
      return decision;
    } catch (error) {
      console.error(`‚ùå AI decision error for ${company.name}:`, error);
      console.log(`üîÑ Using fallback decision for ${company.name}`);
      // ËøîÂõûÂ§áÁî®ÂÜ≥Á≠ñ
      return this.getFallbackDecision(company, gameState, options);
    }
  }

  private buildGameContext(
    company: Company,
    gameState: GameState,
    options: any
  ): any {
    const playerCompany = gameState.companies.find(c => c.isPlayer);
    const totalAssets = gameState.companies.reduce((sum, c) => sum + c.assets, 0);
    
    return {
      company: {
        name: company.name,
        assets: company.assets,
        employees: company.employees,
        buildings: company.buildings.length,
        marketShare: ((company.assets / totalAssets) * 100).toFixed(1)
      },
      competitors: gameState.companies
        .filter(c => c.id !== company.id && c.status === 'active')
        .map(c => ({
          name: c.name,
          assets: c.assets,
          buildings: c.buildings.length,
          isPlayer: c.isPlayer
        })),
      market: {
        availableBuildings: options.availableBuildings.map((b: any) => ({
          id: b.id,
          name: b.name,
          type: b.type,
          cost: b.level * 100000,
          income: b.income
        })),
        stockPrices: gameState.stockMarket.getAllStocks().map(s => ({
          symbol: s.symbol,
          price: s.price,
          change: s.changePercent
        }))
      },
      gameStatus: {
        turn: gameState.currentTurn,
        totalCompanies: gameState.companies.filter(c => c.status === 'active').length,
        playerAssets: playerCompany?.assets || 0
      }
    };
  }

  private buildDecisionPrompt(context: any): string {
    return `
‰Ωú‰∏∫ÂïÜ‰∏öÊ®°ÊãüÊ∏∏Êàè‰∏≠ÁöÑAIÂÖ¨Âè∏${context.company.name}ÔºåËØ∑Ê†πÊçÆ‰ª•‰∏ã‰ø°ÊÅØÂÅöÂá∫ÊúÄ‰ºòÂÜ≥Á≠ñÔºö

„ÄêÂΩìÂâçÁä∂ÊÄÅ„Äë
- ÂÖ¨Âè∏ËµÑ‰∫ßÔºöÔø•${context.company.assets.toLocaleString()}
- ÂëòÂ∑•Êï∞ÈáèÔºö${context.company.employees}‰∫∫
- Âª∫Á≠ëÊï∞ÈáèÔºö${context.company.buildings}Ê†ã
- Â∏ÇÂú∫‰ªΩÈ¢ùÔºö${context.company.marketShare}%

„ÄêÁ´û‰∫âÂØπÊâã„Äë
${context.competitors.map((c: any) => `- ${c.name}: ËµÑ‰∫ßÔø•${c.assets.toLocaleString()}, Âª∫Á≠ë${c.buildings}Ê†ã${c.isPlayer ? 'ÔºàÁé©ÂÆ∂Ôºâ' : ''}`).join('\n')}

„ÄêÂèØË¥≠‰π∞Âª∫Á≠ë„Äë
${context.market.availableBuildings.map((b: any) => `- ${b.name}(${b.type}): ÊàêÊú¨Ôø•${b.cost.toLocaleString()}, Êî∂ÁõäÔø•${b.income.toLocaleString()}/ÂõûÂêà`).join('\n')}

„ÄêËÇ°Á•®Â∏ÇÂú∫„Äë
${context.market.stockPrices.map((s: any) => `- ${s.symbol}: Ôø•${s.price.toFixed(2)} (${s.change >= 0 ? '+' : ''}${s.change.toFixed(2)}%)`).join('\n')}

„ÄêÊ∏∏ÊàèÁä∂ÊÄÅ„Äë
- ÂΩìÂâçÂõûÂêàÔºö${context.gameStatus.turn}
- Ê¥ªË∑ÉÂÖ¨Âè∏Ôºö${context.gameStatus.totalCompanies}ÂÆ∂
- Áé©ÂÆ∂ËµÑ‰∫ßÔºöÔø•${context.gameStatus.playerAssets.toLocaleString()}

ËØ∑ÈÄâÊã©‰∏Ä‰∏™Ë°åÂä®Âπ∂ËØ¥ÊòéÁêÜÁî±„ÄÇÂèØÈÄâË°åÂä®Ôºö
1. purchase_building:[Âª∫Á≠ëID] - Ë¥≠‰π∞Âª∫Á≠ë
2. recruit_employee - ÊãõËÅòÂëòÂ∑•ÔºàÊàêÊú¨Ôø•50,000Ôºâ
3. stock_manipulation:[ËÇ°Á•®‰ª£Á†Å] - ËÇ°Á•®ÊìçÁ∫µ
4. attack:[ÁõÆÊ†áÂÖ¨Âè∏] - ÊîªÂáªÁ´û‰∫âÂØπÊâã
5. intelligence:[ÁõÆÊ†áÂÖ¨Âè∏] - Êî∂ÈõÜÊÉÖÊä•
6. wait - Á≠âÂæÖËßÇÊúõ

ËØ∑Êåâ‰ª•‰∏ãÊ†ºÂºèÂõûÂ§çÔºö
Ë°åÂä®Ôºö[ÂÖ∑‰ΩìË°åÂä®]
ÁêÜÁî±Ôºö[ÂÜ≥Á≠ñÁêÜÁî±]
‰ºòÂÖàÁ∫ßÔºö[1-10ÂàÜ]
`;
  }

  private parseAIResponse(aiResponse: string, context: any): AIDecision {
    try {
      const lines = aiResponse.split('\n');
      let action = 'wait';
      let target: string | number | undefined;
      let reasoning = 'Á≠âÂæÖÊõ¥Â•ΩÁöÑÊó∂Êú∫';
      let priority = 5;
      let cost = 0;

      // Ëß£Êûê AI ÂõûÂ∫î
      for (const line of lines) {
        if (line.startsWith('Ë°åÂä®Ôºö')) {
          const actionText = line.replace('Ë°åÂä®Ôºö', '').trim();
          if (actionText.includes('purchase_building:')) {
            action = 'purchase_building';
            target = parseInt(actionText.split(':')[1]);
            const building = context.market.availableBuildings.find((b: any) => b.id === target);
            cost = building ? building.cost : 100000;
          } else if (actionText.includes('recruit_employee')) {
            action = 'recruit_employee';
            cost = 50000;
          } else if (actionText.includes('stock_manipulation:')) {
            action = 'stock_manipulation';
            target = actionText.split(':')[1];
            cost = 200000;
          } else if (actionText.includes('attack:')) {
            action = 'attack';
            target = actionText.split(':')[1];
            cost = 100000;
          } else if (actionText.includes('intelligence:')) {
            action = 'intelligence';
            target = actionText.split(':')[1];
            cost = 30000;
          }
        } else if (line.startsWith('ÁêÜÁî±Ôºö')) {
          reasoning = line.replace('ÁêÜÁî±Ôºö', '').trim();
        } else if (line.startsWith('‰ºòÂÖàÁ∫ßÔºö')) {
          const priorityText = line.replace('‰ºòÂÖàÁ∫ßÔºö', '').trim();
          priority = parseInt(priorityText) || 5;
        }
      }

      return {
        action: action as AIDecision['action'],
        target,
        reasoning,
        priority,
        cost
      };
    } catch (error) {
      console.error('Error parsing AI response:', error);
      return this.getFallbackDecision(context.company, null, null);
    }
  }

  private getFallbackDecision(
    company: Company,
    gameState: GameState | null,
    options: any
  ): AIDecision {
    // ÁÆÄÂçïÁöÑÂ§áÁî®ÂÜ≥Á≠ñÈÄªËæë
    if (company.assets > 200000) {
      return {
        action: 'purchase_building',
        target: 1,
        reasoning: 'ËµÑ‰∫ßÂÖÖË∂≥ÔºåË¥≠‰π∞Âª∫Á≠ëÂ¢ûÂä†Êî∂Áõä',
        priority: 7,
        cost: 100000
      };
    } else if (company.assets > 50000) {
      return {
        action: 'recruit_employee',
        reasoning: 'ÊãõËÅòÂëòÂ∑•ÊèêÂçáÁ´û‰∫âÂäõ',
        priority: 6,
        cost: 50000
      };
    } else {
      return {
        action: 'wait',
        reasoning: 'ËµÑ‰∫ß‰∏çË∂≥ÔºåÁ≠âÂæÖÊõ¥Â•ΩÊó∂Êú∫',
        priority: 3,
        cost: 0
      };
    }
  }

  private recordDecision(companyId: string, decision: AIDecision): void {
    if (!this.decisionHistory.has(companyId)) {
      this.decisionHistory.set(companyId, []);
    }
    
    const history = this.decisionHistory.get(companyId)!;
    history.push({
      timestamp: Date.now(),
      decision,
    });
    
    // ‰øùÊåÅÊúÄËøë20‰∏™ÂÜ≥Á≠ñËÆ∞ÂΩï
    if (history.length > 20) {
      history.shift();
    }
  }

  getDecisionHistory(companyId: string): any[] {
    return this.decisionHistory.get(companyId) || [];
  }
}

// Âçï‰æãÊ®°Âºè
let aiDecisionEngine: AIDecisionEngine | null = null;

export function getAIDecisionEngine(): AIDecisionEngine {
  if (!aiDecisionEngine) {
    aiDecisionEngine = new AIDecisionEngine();
  }
  return aiDecisionEngine;
}